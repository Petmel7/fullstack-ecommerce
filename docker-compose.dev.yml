# services:
#   frontend:
#     build:
#       context: ./frontend
#       dockerfile: Dockerfile
#     ports:
#       - "3001:3000"
#     volumes:
#       - ./frontend:/app
#       - /app/node_modules
#     environment:
#       - NODE_ENV=development
#     command: npm run dev
#     depends_on:
#       - backend
#     restart: unless-stopped

#   backend:
#     build:
#       context: ./backend
#       dockerfile: Dockerfile
#     ports:
#       - "5000:5000"
#     volumes:
#       - ./backend:/app
#       - /app/node_modules
#     environment:
#       - NODE_ENV=development
#       - DATABASE_URL=${DATABASE_URL}
#     command: npm run dev
#     depends_on:
#       - db
#     restart: unless-stopped

#   db:
#     image: postgres:16
#     container_name: postgres_db
#     environment:
#       - POSTGRES_USER=${POSTGRES_USER}
#       - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
#       - POSTGRES_DB=${POSTGRES_DB}
#     ports:
#       - "5432:5432"
#     volumes:
#       - postgres_data:/var/lib/postgresql/data
#     restart: unless-stopped

# volumes:
#   postgres_data:

services:
  frontend:
    build:
      context: ./frontend
    env_file:
      - ./frontend/.env.local
    ports:
      - "3001:3000"
    command: npm run dev
    depends_on:
      - backend
    restart: always

  backend:
    build:
      context: ./backend
    env_file:
      - ./backend/.env
    ports:
      - "5000:5000"
    volumes:
      - ./backend/uploads:/app/uploads
    command: npm run dev
    depends_on:
      - db
    restart: always

  db:
    image: postgres:16
    env_file:
      - ./backend/.env
    ports:
      - "5432:5432"
    restart: always
    volumes:
      - postgres_data:/var/lib/postgresql/data

volumes:
  postgres_data:


